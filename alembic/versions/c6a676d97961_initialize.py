"""initialize

Revision ID: c6a676d97961
Revises: 
Create Date: 2025-09-24 18:34:56.383601

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c6a676d97961'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade():
    # Step 1: Create new ENUM type in DB
    userrole_enum = postgresql.ENUM('user', 'admin', name='userrole')
    userrole_enum.create(op.get_bind(), checkfirst=True)

    # Step 2: Drop the default before altering the column
    op.alter_column('users', 'role',
        server_default=None  # Drop the old default
    )

    # Step 3: Alter the column type with USING clause
    op.alter_column('users', 'role',
        existing_type=postgresql.ENUM('user', 'admin', name='roles'),
        type_=userrole_enum,
        postgresql_using="role::text::userrole",
        nullable=True,
    )

    # Step 4: Optionally, set new default (based on new ENUM)
    op.alter_column('users', 'role',
        server_default=sa.text("'user'::userrole")
    )

    # Step 5: Drop the old ENUM type if desired
    op.execute("DROP TYPE roles;")

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('password', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_username_unique'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_unique'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'role',
               existing_type=sa.Enum('user', 'admin', name='userrole'),
               type_=postgresql.ENUM('user', 'admin', name='roles'),
               nullable=False,
               existing_server_default=sa.text("'user'::roles"))
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.drop_column('users', 'passwordHash')
    op.drop_index(op.f('ix_sweets_name'), table_name='sweets')
    op.drop_index(op.f('ix_sweets_id'), table_name='sweets')
    op.drop_index(op.f('ix_sweets_category'), table_name='sweets')
    op.alter_column('sweets', 'updatedAt',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('sweets', 'createdAt',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('sweets', 'imageUrl',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('sweets', 'quantity',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('sweets', 'price',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               nullable=False)
    op.alter_column('sweets', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('sweets', 'category',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('sweets', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.add_column('purchases', sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('purchases', sa.Column('sweetId', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('purchases', sa.Column('purchasedAt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'purchases', type_='foreignkey')
    op.drop_constraint(None, 'purchases', type_='foreignkey')
    op.create_foreign_key(op.f('purchases_userId_users_id_fk'), 'purchases', 'users', ['userId'], ['id'])
    op.create_foreign_key(op.f('purchases_sweetId_sweets_id_fk'), 'purchases', 'sweets', ['sweetId'], ['id'])
    op.drop_index(op.f('ix_purchases_id'), table_name='purchases')
    op.drop_column('purchases', 'purchased_at')
    op.drop_column('purchases', 'user_id')
    op.drop_column('purchases', 'sweet_id')
    op.create_table('restocks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('adminId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sweetId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantityAdded', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('restockedAt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['adminId'], ['users.id'], name=op.f('restocks_adminId_users_id_fk')),
    sa.ForeignKeyConstraint(['sweetId'], ['sweets.id'], name=op.f('restocks_sweetId_sweets_id_fk')),
    sa.PrimaryKeyConstraint('id', name=op.f('restocks_pkey'))
    )
    # ### end Alembic commands ###
