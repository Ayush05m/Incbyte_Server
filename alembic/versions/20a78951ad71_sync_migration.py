"""sync migration

Revision ID: 20a78951ad71
Revises: a906e03dc27f
Create Date: 2025-09-24 19:38:47.446069

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '20a78951ad71'
down_revision: Union[str, Sequence[str], None] = 'a906e03dc27f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('restocks')
    op.add_column('purchases', sa.Column('sweet_id', sa.Integer(), nullable=True))
    op.add_column('purchases', sa.Column('user_id', sa.Integer(), nullable=True))
    op.add_column('purchases', sa.Column('purchased_at', sa.DateTime(), nullable=True))
    op.create_index(op.f('ix_purchases_id'), 'purchases', ['id'], unique=False)
    op.drop_constraint(op.f('purchases_sweetId_sweets_id_fk'), 'purchases', type_='foreignkey')
    op.drop_constraint(op.f('purchases_userId_users_id_fk'), 'purchases', type_='foreignkey')
    op.create_foreign_key(None, 'purchases', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'purchases', 'sweets', ['sweet_id'], ['id'])
    op.drop_column('purchases', 'userId')
    op.drop_column('purchases', 'purchasedAt')
    op.drop_column('purchases', 'sweetId')
    op.alter_column('sweets', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('sweets', 'category',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('sweets', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('sweets', 'price',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               nullable=True)
    op.alter_column('sweets', 'quantity',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('sweets', 'imageUrl',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('sweets', 'createdAt',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('sweets', 'updatedAt',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_sweets_category'), 'sweets', ['category'], unique=False)
    op.create_index(op.f('ix_sweets_id'), 'sweets', ['id'], unique=False)
    op.create_index(op.f('ix_sweets_name'), 'sweets', ['name'], unique=False)
    op.add_column('users', sa.Column('createdAt', sa.DateTime(), nullable=True))
    op.alter_column('users', 'username',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.drop_constraint(op.f('users_email_unique'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_unique'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_username_unique'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_unique'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.drop_column('users', 'createdAt')
    op.drop_index(op.f('ix_sweets_name'), table_name='sweets')
    op.drop_index(op.f('ix_sweets_id'), table_name='sweets')
    op.drop_index(op.f('ix_sweets_category'), table_name='sweets')
    op.alter_column('sweets', 'updatedAt',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('sweets', 'createdAt',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('sweets', 'imageUrl',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('sweets', 'quantity',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('sweets', 'price',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               nullable=False)
    op.alter_column('sweets', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('sweets', 'category',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('sweets', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.add_column('purchases', sa.Column('sweetId', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('purchases', sa.Column('purchasedAt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('purchases', sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'purchases', type_='foreignkey')
    op.drop_constraint(None, 'purchases', type_='foreignkey')
    op.create_foreign_key(op.f('purchases_userId_users_id_fk'), 'purchases', 'users', ['userId'], ['id'])
    op.create_foreign_key(op.f('purchases_sweetId_sweets_id_fk'), 'purchases', 'sweets', ['sweetId'], ['id'])
    op.drop_index(op.f('ix_purchases_id'), table_name='purchases')
    op.drop_column('purchases', 'purchased_at')
    op.drop_column('purchases', 'user_id')
    op.drop_column('purchases', 'sweet_id')
    op.create_table('restocks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('adminId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sweetId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantityAdded', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('restockedAt', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['adminId'], ['users.id'], name=op.f('restocks_adminId_users_id_fk')),
    sa.ForeignKeyConstraint(['sweetId'], ['sweets.id'], name=op.f('restocks_sweetId_sweets_id_fk')),
    sa.PrimaryKeyConstraint('id', name=op.f('restocks_pkey'))
    )
    # ### end Alembic commands ###
